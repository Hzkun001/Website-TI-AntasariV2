---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Home",
    href: "#home",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: "Cabinets",
    href: "#cabinet",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M5.23379 7.72989C6.65303 5.48625 9.15342 4 12.0002 4C14.847 4 17.3474 5.48625 18.7667 7.72989L20.4569 6.66071C18.6865 3.86199 15.5612 2 12.0002 2C8.43928 2 5.31393 3.86199 3.54356 6.66071L5.23379 7.72989ZM12.0002 20C9.15342 20 6.65303 18.5138 5.23379 16.2701L3.54356 17.3393C5.31393 20.138 8.43928 22 12.0002 22C15.5612 22 18.6865 20.138 20.4569 17.3393L18.7667 16.2701C17.3474 18.5138 14.847 20 12.0002 20ZM12 8C12.5523 8 13 8.44772 13 9C13 9.55228 12.5523 10 12 10C11.4477 10 11 9.55228 11 9C11 8.44772 11.4477 8 12 8ZM12 12C13.6569 12 15 10.6569 15 9C15 7.34315 13.6569 6 12 6C10.3431 6 9 7.34315 9 9C9 10.6569 10.3431 12 12 12ZM12 15C10.8954 15 10 15.8954 10 17H8C8 14.7909 9.79086 13 12 13C14.2091 13 16 14.7909 16 17H14C14 15.8954 13.1046 15 12 15ZM3 11C2.44772 11 2 11.4477 2 12C2 12.5523 2.44772 13 3 13C3.55228 13 4 12.5523 4 12C4 11.4477 3.55228 11 3 11ZM0 12C0 10.3431 1.34315 9 3 9C4.65685 9 6 10.3431 6 12C6 13.6569 4.65685 15 3 15C1.34315 15 0 13.6569 0 12ZM20 12C20 11.4477 20.4477 11 21 11C21.5523 11 22 11.4477 22 12C22 12.5523 21.5523 13 21 13C20.4477 13 20 12.5523 20 12ZM21 9C19.3431 9 18 10.3431 18 12C18 13.6569 19.3431 15 21 15C22.6569 15 24 13.6569 24 12C24 10.3431 22.6569 9 21 9Z"></path></svg>`,
  },
  {
    label: "Projects",
    href: "#project",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M19 4H5V20H19V4ZM3 2.9918C3 2.44405 3.44749 2 3.9985 2H19.9997C20.5519 2 20.9996 2.44772 20.9997 3L21 20.9925C21 21.5489 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5447 3 21.0082V2.9918ZM11.2929 13.1213L15.5355 8.87868L16.9497 10.2929L11.2929 15.9497L7.40381 12.0607L8.81802 10.6464L11.2929 13.1213Z"></path></svg>`,
  },
  {
    label: "Blog",
    href: "#blog",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M3 9.00886C3 5.69022 5.69071 2.99951 9.00935 2.99951H12C15.3093 2.99951 17.9942 5.67508 18.0093 8.98082H18.9533C20.1037 8.98082 21 9.87713 21 11.0275V14.9902C21 18.3088 18.3093 20.9995 14.9907 20.9995H9.00935C5.69071 20.9995 3 18.3088 3 14.9902V9.00886ZM9.00935 4.99951C6.79528 4.99951 5 6.79479 5 9.00886V14.9902C5 17.2042 6.79528 18.9995 9.00935 18.9995H14.9907C17.2047 18.9995 19 17.2042 19 14.9902V11H18C16.9243 11 16 10.0756 16 9C16 6.78593 14.2141 4.99951 12 4.99951H9.00935ZM8 9C8 8.44772 8.44772 8 9 8H12.5C13.0523 8 13.5 8.44772 13.5 9C13.5 9.55228 13.0523 10 12.5 10H9C8.44772 10 8 9.55228 8 9ZM9 14C8.44772 14 8 14.4477 8 15C8 15.5523 8.44772 16 9 16H15C15.5523 16 16 15.5523 16 15C16 14.4477 15.5523 14 15 14H9Z"></path></svg>`,
  },
];
---

<div class="flex justify-center w-full">
  <nav
    id="main-nav"
    class="fixed left-1/2 -translate-x-1/2 z-[100] bg-transparent backdrop-blur-xl mt-3 transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-full rounded-2xl md:rounded-full"
  >
    <div class="container mx-auto flex items-center p-3">
      <div class="flex items-center flex-none mr-4">
        <div aria-label="Logo" class="flex items-center gap-4">
          <img
            src="/svg/hmti.svg"
            alt="Logo"
            class="w-9 h-9 md:w-12 md:h-12 rounded-2 "
          />
          <img
            src="/uin.webp"
            alt="Logo"
            class="w-9 h-9 md:w-12 md:h-12 rounded-full shadow"
          />
        </div>
      </div>
      <ul
        class="flex flex-grow justify-center md:space-x-6 md:gap-12 gap-6 p-2"
      >
        {
          navItems.map((item) => (
            <li class="flex">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group"
              >
                <div class="absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[#A9FF5B] nav-indicator hidden md:block" />
                <span class="md:hidden flex items-center justify-center w-6 h-6">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
      <div class="flex items-center flex-none ml-4">
        <a
          href="#contact"
          aria-label="Get in Touch"
          class="flex items-center px-4 py-2 md:px-5 md:py-2 rounded-full bg-orange-400 text-white font-medium shadow blur-1 border-orange-400 hover:shadow-lg hover:bg-[var(--sec)] transition-all duration-200 whitespace-nowrap"
          >Get in Touch
        </a>
      </div>
    </div>
  </nav>
</div>
<style>
  nav {
    transform: translateX(-50%);
    background: transparent;
    backdrop-filter: blur(16px);
    transition:
      background-color 0.5s cubic-bezier(.4,2,.3,1),
      border-radius 0.3s cubic-bezier(.4,2,.3,1);
  }

  nav.scrolling {
    background: rgba(30, 30, 30, 0.25);
    border-radius: 9999px;
  }

  nav a.active .nav-indicator {
    transform: translateY(-50%) scale(1);
    opacity: 1;
  }

  nav a.active {
    color: var(--white) !important;
    font-weight: bold;
    text-shadow: 0 1px 8px #fba98b44;
  }

  @media (max-width: 767px) {
    nav {
      width: 100% !important;
      transform: translateX(-50%);
      bottom: 0;
      left: 50%;
      position: fixed;
      border-radius: 1rem 1rem 0 0;
      background: transparent;
      backdrop-filter: blur(16px);
    }

    nav.scrolling {
      border-radius: 1rem 1rem 0 0;
      background: rgba(30, 30, 30, 0.25);
    }

    body {
      padding-bottom: 50px;
    }
  }
</style>

<script>
  const nav = document.getElementById("main-nav");
  const maxScroll = 800;
  let rafId: number | null = null;

  function updateNav() {
    if (window.scrollY > 0) {
      nav?.classList.add("scrolling");

      const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
      const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);

      const minWidth = 828;
      const maxWidth = window.innerWidth * 0.9;
      const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;

      if (window.innerWidth >= 948) {
        nav?.style.setProperty("width", `${currentWidth}px`);
      }
    } else {
      nav?.classList.remove("scrolling");
      nav?.style.setProperty("width", "90%");
    }
    rafId = null;
  }

  window.addEventListener(
    "scroll",
    () => {
      if (!rafId) {
        rafId = requestAnimationFrame(updateNav);
      }
    },
    { passive: true },
  );

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = e.currentTarget as HTMLAnchorElement;
      const targetId = target.getAttribute("href")?.substring(1) || "";
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: "smooth",
        });
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    const observerOptions = { threshold: 0.6 };

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => link.classList.remove("active"));
          const id = entry.target.getAttribute("id");
          const activeLink = document.querySelector(`nav a[href="#${id}"]`);
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions,
    );
    sections.forEach((section) => observer.observe(section));
  });
</script>

<style>
  @media (max-width: 767px) {
    body {
      padding-bottom: 70px;
    }
  }

  nav a.active {
    color: white !important;
  }
</style>
